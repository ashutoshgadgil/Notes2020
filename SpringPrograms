1.

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Define your beans here -->
    
    <bean id="carobj" class="org.pro.Scorpio"></bean>
    
    <bean id="carobj1" class="org.pro.BMW"></bean>
    
</beans>

--------------------------------------------------------------------------------

package org.pro;

public class BMW implements Cars{
	public String getSpecs()
	{
		return "BMW Specifications";
	}
}


-------------------------------------------------------------------------------

package org.pro;

public interface Cars {
	public String getSpecs();
}

-----------------------------------------------------------------------------

package org.pro;

public class Scorpio implements Cars{
	public String getSpecs()
	{
		return "Scorpio Specifications";
	}
}

----------------------------------------------------------------------------

package org.pro;

import org.springframework.beans.factory.xml.XmlBeanFactory;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.core.io.ClassPathResource;

public class TestMain {

	public static void main(String[] args) {
		//BMW b=new BMW();
		
		//Scorpio s=new Scorpio();
		
		//Cars c=new Scorpio();    // Hardcoding
		
		// Step-1 : Load spring configuration file 
		//ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext("applicationContext.xml");
		
			
		// Step-2 : Retrieve the bean from the container ,Use getBean() method
		//Cars c= context.getBean("carobj1",Cars.class); // new BMW();
		
		// Step-3 : Access methods of bean
		//System.out.println("Specifications : "+c.getSpecs());
		
		// Step-4 : Close the context object
		// context.close();
		
		// Use of BeanFactory(interface)  class (XmlBeanFactory)
				
		XmlBeanFactory context=new XmlBeanFactory(new ClassPathResource("applicationContext.xml"));
				
		Cars c= context.getBean("carobj",Cars.class);
		
		System.out.println(c.getSpecs());
		
		//System.out.println(c.getSpecs());
		
		
	}

}
==============================================================================================================


package org.pro2;

public class Employee {
	public Employee() {
		super();
	}
	public Employee(int id, String name, float salary) {
		super();
		this.id = id;
		this.name = name;
		this.salary = salary;
	}
	private int id;
	private String name;
	private float salary;
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public float getSalary() {
		return salary;
	}
	public void setSalary(float salary) {
		this.salary = salary;
	}
	
	
}

-----------------------------------------------------------------------------------

package org.pro2;

import org.springframework.jdbc.core.JdbcTemplate;

public class EmployeeDao {                 // DAO Class (data Access Object)
	private JdbcTemplate jdbctemplate;

	public void setJdbctemplate(JdbcTemplate jdbctemplate) {   // Setter Injection
		this.jdbctemplate = jdbctemplate;
	}
	
	public int saveEmployee(Employee e)   // Inserting record in table
	{
		String q="insert into employees values("+e.getId()+",'"+e.getName()+"',"+e.getSalary()+")";
		//String q="insert into employees(id,name,salary) values(?,?,?)";
    
		return jdbctemplate.update(q);
	}
	
	public int deleteEmployee(Employee e){   // Deleting record from table
	    String query="delete from employees where id=?";  
	    System.out.println("deleting....");
	    return jdbctemplate.update(query,e.getId()); 
	}  
	
	public int updateEmployee(Employee e){    // Updating record from table
	    String query="update employees set name=? where id=?";  
	    return jdbctemplate.update(query,e.getName(),e.getId());  
	}  
	
	public List<Employee> getEmployees()
	{
		String query="select * from employees";
		List<Employee> l= jdbctemplate.query(query, new EmployeeMapper());
		return l;
	}
}


------------------------------------------------------------------------------------



package org.pro2;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestJdbc {

	public static void main(String[] args) {
		 ApplicationContext ctx=new ClassPathXmlApplicationContext("JdbcapplicationContext.xml");  
	    
		 EmployeeDao dao=(EmployeeDao)ctx.getBean("edao");  
		 
		  // Inserting record
		   /* int status=dao.saveEmployee(new Employee(101,"Ajay",25000));  
		    System.out.println(status);  
		  */
		 
		 
		 // Updating Record
		    Employee e=new Employee(); 
		    e.setId(101);
		    e.setName("Rahul");
		    int status=dao.updateEmployee(e); 
		    System.out.println(status); 
		 
		 
		 
		    // Deleting Records
		 /*
		    Employee e=new Employee(); 
		    e.setId(101); 
		    int status=dao.deleteEmployee(e); 
		    System.out.println(status+" Records deleted");
		   */ 
		   
		      List<Employee> l=dao.getEmployees();
		    
		    for (Employee employee : l) {
				System.out.println(employee.getId()+" "+employee.getName()+" "+employee.getSalary());
			}
	}

}


---------------------------------------------------------------------------------------------

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Define your beans here -->
    
  <bean id="ds" class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />  
<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />  
<property name="username" value="system" />  
<property name="password" value="root" />  
</bean>  
  
<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">  
<property name="dataSource" ref="ds"></property>  
</bean>  
  
<bean id="edao" class="org.pro2.EmployeeDao">  
<property name="jdbctemplate" ref="jdbcTemplate"></property>  
</bean>  
</beans>
---------------------------------------------------------------------------------------------

package org.SpringJdbcTemplate;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.springframework.jdbc.core.RowMapper;

public class EmployeeMapper implements RowMapper<Employee>{

	@Override
	public Employee mapRow(ResultSet rs, int rownum) throws SQLException {
		Employee e=new Employee();
		e.setId(rs.getInt("id"));
		e.setName(rs.getString("name"));
		e.setSalary(rs.getFloat("salary"));
		return e;
	}

}

------------------------------------------------------------------------------------------

Hibernate Integration with Spring

Dependencies

<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-core</artifactId>
    <version>3.5.0-Final</version>
</dependency>
    <!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-entitymanager -->
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-entitymanager</artifactId>
    <version>3.5.0-Final</version>
</dependency>
    <!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-core</artifactId>
    <version>3.0.0.RELEASE</version>
</dependency>
    
    <!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>3.0.0.RELEASE</version>
</dependency>
    <!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>3.0.0.RELEASE</version>
</dependency>
    
    <!-- https://mvnrepository.com/artifact/org.springframework/spring-orm -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-orm</artifactId>
    <version>3.0.0.RELEASE</version>
</dependency>
    <!-- https://mvnrepository.com/artifact/com.oracle.ojdbc/ojdbc8 -->
<dependency>
    <groupId>com.oracle.ojdbc</groupId>
    <artifactId>ojdbc8</artifactId>
    <version>19.3.0.0</version>
</dependency>
<!-- https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp -->
<dependency>
    <groupId>commons-dbcp</groupId>
    <artifactId>commons-dbcp</artifactId>
    <version>1.4</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-api</artifactId>
    <version>1.7.30</version>
</dependency>


--------------------------------------------------------------------------------------------------

applicationContext.xml

<?xml version="1.0" encoding="UTF-8"?>  
<beans  
    xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:p="http://www.springframework.org/schema/p"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">  
  
  
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">  
        <property name="driverClassName"  value="oracle.jdbc.driver.OracleDriver"></property>  
        <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"></property>  
        <property name="username" value="system"></property>  
        <property name="password" value="root"></property>  
    </bean>  
      
    <bean id="mysessionFactory"  class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">  
        <property name="dataSource" ref="dataSource"></property>  
          
        <property name="mappingResources">  
        <list>  
        <value>prod.hbm.xml</value>  
        </list>  
        </property>  
          
        <property name="hibernateProperties">  
            <props>  
                <prop key="hibernate.dialect">org.hibernate.dialect.OracleDialect</prop>  
                <prop key="hibernate.hbm2ddl.auto">update</prop>  
                <prop key="hibernate.show_sql">true</prop>  
                  
            </props>  
        </property>  
    </bean>  
      
    <bean id="template" class="org.springframework.orm.hibernate3.HibernateTemplate">  
    <property name="sessionFactory" ref="mysessionFactory"></property>  
    </bean>  
      
    <bean id="d" class="org.pro.ProdDao">  
    <property name="ht" ref="template"></property>  
    </bean>  
      
      
    </beans>  
---------------------------------------------------------------------------------------------

Aspect Oriented Programming

<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.6</version>
</dependency>
    <!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>5.3.4</version>
</dependency>







