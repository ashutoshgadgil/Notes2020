


 Java :

      C:\Program Files\Java\                       Home diectory
                             jdk 1.8
                             jre 1.8


   Run the Java Program :
                          1) Using command prompt

                          2) Using IDE (eclipse)

   Compiler :
                 
              Source file (Code in English like language) ------ Program (.java)

                                  Compiler ( javac )
              
              Byte code (binary form)

                                  JVM (Java Virtual Machine)  -----> (java) ---> Interpreter
              
              Run application


   JDK ( Java Development Kit ) 1.8  ==> JRE + JVM 

   
   Setting the JAVA Path :

                         1) Temporary way
					   Command prompt >  SET PATH = pathname

                         2) Permanent way
                                           Through Control Panel

   Java Path : 
               Path where java is installed 
 
   Compiler path




 1)  Compiling Java Program

                              javac ------> To compile java program 

                              Syntax:
                                        > javac filename.java 

                                        > javac demo.java


          Note : After compilation java byte code is generated by compiler (.class file)


 2)  Running / executing Java Program


                               java -----> To run/ execute java program
                  
                               Syntax:
                                        > java filename
                                       
                                        > java demo


  Java Language :
                 1) Platform independent language
                 2) High Level language
                 3) Secure 
                 4) Object oriented language
                 5) Case sensitive ( age & Age both are different)
                 6) Compiled & interpreted language (Write once & run anywhere)
                 7) Strongly Typed Language


  Byte code :
              compiled code from the source file (.class)

              JVM reads the byte code

              Platform independent

  JVM : 
              Platform Dependent

 
  Created by : James Gosling

  
  Editions in Java :
                     1) JSE (Java Standard Edition)
                     2) JEE (Java Enterprise Edition)
                     3) J2ME (Micro edition)


  Type of Applications :
                     1) Standalone / Desktop Applications
                     2) Web Applications
                     3) Enterprise Applications
                     4) Mobile Applications


  
   Programming Structure of Java Program :

   
                         class classname
			 {
                                
                                  function defintions


                                  main function definition      
                                            Create objects  
                         }


            
    Note : main() method is automatically called by JVM.

    Classes :  
              Grouping of data members 
              
	      Data members : varibales & methods

              Performs a specific task

              Class is a blueprint which is used to create an object.

              class defines the behaviour(methods) and it has some states(variables)

              Member variable : is the variable declared inside a class.

              Member method   : is the method defined inside a class.
      
              Every class will have a name.

              class is a keyword in java

    We can use the following classes:

              1) Predefined classes : System, String

              2) User defined classes  : demo, demo1,pro1, Addition


    Object :

		Real world entity which has the attributes / features.

               Ex :
                       Product : Class

                       Type of products
                     
                         (objects) Laptop : features --- color, price, storage, processor

   			           printer : features ---- cost, printerBrand, capacity
                
		Every object will be different from every other object     
         


     How to define a class :


                             class classname
			     {
				  Classmembers (member variables, member methods)

			     }


			Ex : 
                              class Student
			      {

					int rollno;      // member variable

					void showRoll()  // member method
					{
						
					}
			      }

                              class demo
			      {
					public tatic void main(String args[])
					{
						Student s1 = new Student();    // s1 is object of student class
						s1.showRoll();
					}
   			      }

     Object Creation :
                            
                     classname objectname = new classname();


     Pillers of Java :

			1) Encapsulation : Enclosure / Unit 
					   Unit of data members
					   Ex : Class 
                                           
                            Data hiding : feature to hide the data of a class from outside the class or outside world.
 

			2) Abstraction  :
					To hide implementation details of the class


			3) Inheritance  :
                                         To access the features of one class into another class.

					 Object :     class (Parent class of all classes of the program)

			4) Polymorphism :
                                         Many forms 


=========================================================================================================


      public static void main(String args[])
      {
		
      }

      public  : main is available to outside the class (JVM can access main function)

      static  : memory saving concept
 
      void    : return type
 
      main    : function name (Entry point of the program)
  
      String args[]   : Command line arguments (args[])

   
   ====================================================================================

   	System.out.println("Welcome to Java");

        int x=20;


        System.out.println(x);

        System : Predefined class
        out : static object of the class PrintStream, defined in System class
        println() : function to display the data on the screen , Defined in PrintStream class


        Ex :
                class System
		{

			static PrintStream out;   // member variable

		}


    Note : any static data member of a class can be accessed with the help of class name ==>   System.out (PrintStream Object)

               class PrintStream
	       {
		        void println(String str)
			{
				// will print the string str on the screen
			}
               }
  

               System.out.println("Hello");


     ===================================================================================


     Stream :
                 object through which the data is transferred from source to destination

     Type of streams :
                      1) Standard output stream  ====> System.out
                      2) Standard Input stream   ====> System.in
                      3) Standard error stream   ====> System.err

     ===================================================================================


    Data types :
                 Type of data which is stored in variable

                 1) Primitive  (predefined)
						Integral        : byte , short, int, long
                                                floating point  : float , double
                                                character       : char
                                                boolean         : boolean
                              
                 2) Non primitive (User defined)
                                                Arrays
                                                String
                                                objects

    byte  :   1 byte
    short :   2 bytes
    int   :   4 bytes
    long  :   8 bytes
    
    float :   4 bytes
    double:   8 bytes

    char  :   2 bytes
   
    boolean : 1 bit

 ======================================================================================

  char : 2 bytes 
  Unicode character system (Multilingual suuport)

  boolean : true , false

  =====================================================================================


   Wrapper Classes :
                      Convert the primitive data type into non primitive type
		      Convert the non primitive data type into primitive type

                     
                      primitive datatype  ------------ Wrapper Classes
                     -------------------------------------------------
                         
                             int                    Integer
                             byte                   Byte
                             short                  Short
                             long                   Long
                             float                  Float
                             double                 Double
                             char                   Character
                             boolean                Boolean                
		   
  Type Conversion :
                   Convert a data type value into another type of data.

            Note : Narrowing -> larger type is converted into smaller type
                                 int -> byte
                              
                   Widening -> smaller type is converted into larger type               
                                 byte -> int

            Type of conversion :
            1)  Implicit (Automatic conversion)
					

            2)  Explicit (Manual conversion)

 =================================================================================



   Memebers declaration in the class and Accessing of members from outside the class:


   class xyz
   {
        members;   // declaration
   }


   class MAIN
   {
	public static void main(String args[])
	{
		xyz obj=new xyz();  

                obj.member;    // Accessing of member through object
	}
   }


 ================================================================================

  Type of variables :
                     1) Local variable 
                                       variable declared in a method or block , Value will not be accessible outside method.


                     2) Instance variable
				       seperate meory is allocated for each object. 
    				       declared inside a class and outsie the method of the same class.
				        can not be accessed in static method
				       non static

		     3) static variable
					Single memory is shared among all objects of the class
				        class variable
					can be accessed in non static method and staic method


 Static method :
                 static : keyword


                 1) can be called with the classname and . operator
                        
                        classname.staticMethodName();

                        Student.getCollege();   

===============================================================================================

 Naming Convention :

                    Class :
                           1) Class name should give the purpose of class
			   2) Camel case notation
 			   3) First letter of the class should be in capital case
			   4) Class name should not contain any space
 
                    methods :
                           1) start the method name with small case letter
                           2) there should be no space between method name  : First Name (invalid)
                                                                              FirstName  (camel case), First_Name

                    variable :
			   1) should not start a variable name with numeric.
                           2) use small case letters
                           3) abc , ABC both are different.
 			   4) Reserved words or data type should not be used as a variable name.

=============================================================================================


 Access specifiers :

                   Used to provide access permission to the data members of the class.

                   1) private
				Accessible to the same class method, butt not accessible to othe class / other package
			
                   2) protected
				Accessible only within the class and outside the class but in the same package , Not accessible to other package
                                Accessible to other package using inheritance concept

                   3) public
				Accessible to the class of the same package or different package

                   4) Default 
                                Accessible within the package, Do not specify any access specifiers like private, protected or public at the time of declaration


   Note : Methods of the class should be declared in public section,
          Instance variables should be declared either private or protected

===============================================================================================


  this keyword :
                this refers to the current object.
                To remove the ambuiguity problem.

==============================================================================================

  Constructor :
                Special member function used to initialize data members of an object.
                Same name as the class name
                called automatically by compiler
	        does not have any returning value
                constructors can be overloaded
                constructors can not be inherited
		Constructors are called at the time of creation of objects.
		Constructors should be defined in the public section

  Type of consructors :
                1) Default
			   No arguments are passed

                2) Parameterised 
              		   Arguments are passed
			                
     
  ============================================================================================

   Copy the object into another object using Parameterised constructor :


        public Employee(Employee obj)  // Parameterised constructor copying the company of one object into other object
	{
		company=obj.company;       // e4.company = e2.company
	}
		

==============================================================================================

		
   final : keyword
                   To define a variable as a constant.
					 final variable can not be modified

                   method can be final
                                         final method can not be overridden
   
                   class can be final
					 final class can not be inherited
==============================================================================================

  String :
           is a final class
           is a immutable class
           predefined class in      java.lang
          
           Type of Strings :
                            1) Mutable (Modifiable) :         contents can be modified
 
							StringBuffer , StringBuilder

			    2) Immutable ( Not Modifiable) :  contents can not be modified
         
							String
		
   String object can be defined in two ways :
	
	      1)  String s1="Hello World";        // String Literal
		
	      2)  String s2=new String("Welcome");  // String creation using new 
===============================================================================================

Control statements :

                       Decision making
                       Loop statements
                       Branching statements

  
 Decision making :
                       if
                       if ... else
                       if ...else if....else
                       nested if

 operator :   Relational operators       < > <= >= == !=  
              equal()  


  Scanner class : java.util
				used to read the data from user
           


		 Methods :
                                next()
 				nextInt()
 				nextDouble()

  Loop
           1) for
	   2) while
	   3) do while
	   4) Enhanced for or Foreach loop

 ===============================================================================

  Array :
          Syntax :

       1) one Dimensional Array
                                    datatype arrayname = new datatype[SIZE];

				    char alpha[]=new char[5]; // character array

 				    int num[]=new int[5];     // Integer array

               Array of Objects
                                    Employee : class


				    Employee e[]=new Employee[3];

                Array Initialization :
                                     num[0]=100;

                                     or
                                             int num[]={1,2,3,4,5};

=====================================================================================

  Method Overloading :
                      1) example of Compile time polynt data typemorphism
		      2) Same name method is defined more than once with different no of arguments & diffrent data type.

======================================================================================
 Inheritance :

                   concept of parent child relationship
                   Reusability

                   Class derives or inherits other classes is called inheritance
                   Advantage : Dont have to make efforts to write a method which is already created
                               Time saving
                   Classes :  
                             Base class / Super class / Parent class  : Properties will be used by Derived class
                             Derived class / Sub class / Child class  : Will use the properties of Base class

                   extends : keyword used to derive a class

      Type of inheritances 
                          1) Single       : A class inherits a single class only
                          2) Multilevel   : Class A inherits class B , class B inherits class C, c is grand child, A is grand parent
                          3) Hierarchical : One class can inherit multiple classes


     Note : Multiple inheritance is not supported in Java but it can be achieved using a concept  interface


                  Syntax :
                             class derivedclassname extends Baseclassname
			     {
				
			     }
======================================================================================

   Constructor calling in Inheritance   


                             Base : constructor

                             Derived : constructor


  super : keyword
		1) To call the superclass constructor
		2) To call the method of the immediate super class
                3) To call the instance variable of immediate super class

======================================================================================

  

 concrete class :
                 complete class

 Abstract Class :
                 incomplete class
                 partial implementation
                 will have methods with body and some methods will have no body
		 Objects of Abstract class can not be created, Reference of abstract class can be created
                 Abstract class can be inherited


      abstract : keyword

                 syntax :
                         abstract void showArea();
                Note : Abstract method can not have a body. The method must be declared in abstract class.
                       Abstract method body must be implemented in the derived class.



====================================================================================


 Interface :

           Interface is a contract between service provider and client.
           Interface provides full abstraction
           Interface will have all abstract methods  
           By default all methods in an interface are public,abstract
           All member variable in the interface will be public , static and final; 
           Interface can not be instantiated (can not create object of interface), refrence variable of it can be created.   
     
     interface : keyword

     1) A class can implement an interface
     2) A class can extends another class
     3) An interface can extend another interface

     Ex :

                    intref1 : interface
                    myclass : class


     implements : keyword
                          To implement an interface in the class

     Interface extending another Interface :

=========================================================================================

	  Polymorphism
			1) Overloading (Compile Time polymorphism ) /static biding /early binding
				
				method definition
				method call

                             When a class has same name method which appears more than once.

  			2) Overriding (Run time polymorphism ) / Dynamic binding/late binding

                             When a base class is having a exactly same method as in the derived class.


           Upcasting :
                      Reference of the Base class can refer to the child class object ,it is called as upcasting.

		      Class Base :
                      Class Derived :

                                       Base ref;       
                                                     Base b1;
						     Derived d1;

                                       ref= b1;    // Upcasting
				       ref= d1;


 =======================================================================================


  POJO (Plain Old Java Object) :

                                Class has constructor, Getter method , setter methods

                               Class City
			       {
					int citycode;   // instance variable
					constructor()
					setter method  : Set the values to the member variables
					getter method  : return the values from the methods
			       }

=======================================================================================


  Command Line Arguments :
                            Arguments which are passed at command line while running the program

                            public static void main(String args[])
			    {

			    }

			    args[] : Accepts command line argument as a string

===============================================================================================

  
 String :  java.lang
           final class
           immutable (non modifiable)


 Mutable (Modifiable) String classes

 1) StringBuffer

 2) StringBuilder is faster than StringBuffer because StringBuilder works on multiple threads at a time , StringBuffer works on single thread at a time.


===============================================================================================

 Creation of Immutable class :

     1) Create a final class
     2) Define data members as final
     3) Parametererised constructor

============================================================================================

Object Class methods

  toString() : method of Object Class(Topmost class in Java)
  clone()    : Creates the exact copy of an object
  hashcode() : returns the hashcode of the object  
  finalize() : in garbage collection


============================================================================================


  Exception Handling :

                       Process of handling the exception programatically so that the execution flow of the program can be maintained.

                       s-1
  		       s-2
                       s-3   ------ Exception
                       s-4
		       s-5

  Keywords of Exception handling :
                                   try     : block {} ,raises the exception
				   catch   : block {} , handles the exception (Exception handler)
				   throw   : keyword , To manually throw the exception object.
				   throws  : keyword , To propogate the exception, use with method header
				   finally : block {}, optional to write and it performs cleanup operation

 Type of Exception
		1) Checked Exception
				        Exception checked at compile time.
					Ex:  IOException, SQLException, FileNotFoundException										
	
		2) Unchecked Exception
				        Exception checked at run time.
                                             RuntimeException
					Ex:  ArithmaticException, NullPointerException, ArrayIndexOutOfBoundsException

 Throwable (Parent class of all exception classes)

                                                 1) Exception  ---> IOException, SQLException, FileNotFoundException
                                                                  > ArithmaticException, NullPointerException, ArrayIndexOutOfBoundsException
  
                                                 2) Error   ----> VitualMachineError, StackOverflow


  throw : keyword 
                 To throw checked or unchecked exception manually.


                 throw new ArithmeticException();   
                 
                  or
                 
                  AritmeticException e=new ArithmeticException();

                  throw e;


  throws : keyword
                  used for checked exception
                  with method 
		  can throw checked and unchecked exceptions
                  used in exception propogation


  Exception Handling with method overriding

    1) If a overridden method in the derived class is throwing a checked exception then the base class method must throw the check exception of the same type.
    2) If a overridden method in derived class is throwing a checked exception of base class type then the method in the base class can not throw the exception  of 
       child type but it must throw the exception of the same base type.
         

  Custom Exception
		 User Defined exceptions
              
                 can be created on extending the Exception class.

  ====================================================================================================================


  instanceOf : operator 
                To check a particular instance
                true/false

                String str;

		str instanceOF String  ======> true
 =====================================================================================================================

  Thread in Java : 

             Subprogram of a program.
	     subprogram is a thread


             process vs Thread
               
             10kb           

		P

		P1, P2

	     Multitasking 
			  1) Multiprocessing
			  2) Multithreading

   Thread Lifecycle :

                    1) New : Thread is created          (create object of Thread class)

		    2) Ready : Thread is ready to run   (call the start() method on the thread)

		    3) Running : Thread is running      (Override run() method in Thread class and run() is called when start() is called om thread object )

		    4) waiting / Blocked : Thread is waiting to run again  ( sleep() method on thread )

		    5) Dead / terminated : When thread completes its execution  ( When a thread executes the run() method completely)


  context Switching ;
                      CPU can execute any thread at any time.
                      t1,t2,t3 

  Thread Scheduler :
		      Program of JVM which schedules the thread

  
  How to create a Thread ?
                         1) Extending Thread class : 
                                                      package : java.lang.Thread

						      start() :  

				class mythread extends Thread


			 2) Implementing Runnable interface
         

				class mythread implements Runnable

  Methods of Thread class :
                          start()
                          run()
			  getName()   : returns the name of the thread
			  setName()   : sets the name of the thread
			  currentThread() : return the reference of the current Thread , Static Method

                          Priority  : 1 - 10 , default Priority : 5 , MIN_Priority = 1 , NoRM_Priority = 5, MAX_Priority = 10
                       
			  getPriority() : return the priority of the thread ,                
			  setPriority() : sets the priority of the thread

                          sleep(timeinsecs) : To make the state of a thread as a waiting state.
			  join() :   wait for a thread to die
			  setDaemon() : Used to define a thread as a Daemon Thread
                          isDaemon() :  Check if a thread is Daemon or not

  Daemon Thread :
                    Service provider (Daemon Thread ) : It completes its execution after providing services to all the user threads.
							gc (Garbage Collector)
				                        Low priority Thread
							Background thread

				
		    user thread :   User defined thread   
  
  Garbage Collection
			Demo d=new Demo();


  How to make an object elegible for garbage collection?


   1) Nullifying reference variable , Assign NULL to reference variable
   2) Reassign the reference variable 
   3) Define an object in a method

  Two methods to request to JVM for garbage collection

   1)  System.gc()   
   2)  Runtime Class   : singleton (single object can be created for a singleton class)
 
  Synchronization
                    One thread at a time can run the shared method / shared resource of a class
   

  Synchronized method :
			synchronized : keyword


                        public synchronized void fun()
			{

			}            

  Synchronized block  :   synchronize(this)
			  {  
                          
			  }


   =========================================================================================

   Date & Time API :

    Date class : legacy (old) class

   1) LocalDate  : predefined class (Format : yyyy-MM-dd ) 2020-12-28
      
       methods: now() -- current date from system , defined as static
                minusDays(int) 
                plusDays(int)


   2) LocalDateTime

   3) DateTimeFormat

   4) LocalTime


 ============================================================================================


   
   StringTokenizer ( Class )
				Used to tokenize or divide the complete string

                                hasMoreElements()
			        hasMoreTokens()
				nextElement()
				nextToken()
				countTokens()

   split() method of String Class 


===========================================================================================

    Emumaration


                Enum : keyword

                Enum is a grouping of constant values.

                syntax :
			  Enum enumname
			  {
				COnstants values;
			  }

==========================================================================================

 
   Collections Framwork :

			Set of classes and interfaces 


   Collection : root interface 

   Child interfaces : List, Set, Queue 
   Map interface :


   Use of collections : Use to perform operations on the objects


  Interface  :  implementation classes
 ----------------------------------------------------

  Collection : Base interface 

      List  :  ArrayList , vector, Stack, Linkedlist

	       Duplicate values are allowed
	       Insertion order is maintained	

      Set   :  HashSet, LinkedHashSet, TreeSet (Ascending order is maintained, null elements not allowed)

	       Duplicates are not allowed
	       Insertion order is not maintained in HashSet

      Queue :  Dequeue, PriorityQueue

 
=================================================================================

     
      Map :    HashMap,TreeMap

               Treemap maintains Ascending order while HashMap does not.

               Map is a key-value pair data structure
	       To find value stored based on the key
               Key can not be same

     How to access Map elements ?
      
     Map.Entry : interface (used to iterate elements in the map)

     entrySet() : converts the map into set
            
   
               Array :
			
               ArrayList : orderd list can be created using ArrayList Class


               Two ways to create ArrayList Object :

			                 1)      ArrayList ob = new ArrayList();                      // Non generic

					 2)      ArrayList<String> ob = new ArrayList<String>();      // Generic way

 ===========================================================

   Iterator      : interface (Iterate elements in forward direction)

   ListIterator  : interface ( Iterate elements in reverse order)


   toArray() : To convert an arrayList into array

 ====================================================================

 IO Streams :

		Stream : sequence of bytes

		Standard Stream :
				 1) Standard Output : System.out   (Screen)

			         2) standard Input  : System.in    (Keyboard)

				 3) Standard error  : System.err   (Screen)

                Files Streams
				1) Input Stream : To read data from source(file)

                                2) Output stream : To write data to destination(file)

                Hard disk : create a file
                Java Program  

                  Categorisation
		           Input stream
                                       Data  is transferred from file to the java program
                  
			   Output stream 
				       Data is transferred from java program to the file

        Type of Streams : 1) Byte stream

                          2) Character Stream

        Stream Classes:
			Byte oriented classes

			 1) InputStream   : Abstract  (Base class for input stream classes)
			 2) OutputStream  : Abstract  (Base class for Output stream classes) 

		         3) FileInputStream : Reads data from file in the form of bytes (byte stream)
			 4) FileOutputStream : writes data into the file in the form of bytes 
			 5) ByteArrayInputStream : Reads an array of bytes
			 6) ByteArrayOutputStream: Writes a byte array to the stream 
		         7) ObjectInputStream : Used to read objects which are written previously by ObjectOutputStream
			 8) ObjectOutputStream : Used to write objects


       Serialization
			Process of writing the object into the file
			reduces the network load

       Deserialization
			reverse process of serialization

       How to make an object as a serializable
			                      Use a interface serializable
	Note : On implementing the serializable interface in a class we can make the object as serializable.


       Marker interface  : tagged interface which does not have any abstract method.

                          ex :
                                   interface xyz
				   {

				   }

================================================================================================

   Character stream
			Character oriented classes

			1) FileWriter  (Writer :base class)  : To write data in character form in the file
			2) FileReader  (Reader :base class)  : To read data in character form from the file
			3) BufferedWriter  :  It takes the characters and write it in a buffer and complete buffer is written into the file on the disk.
			4) BufferedReader  :  It takes all characters in a buffer and gives the output
			5) InputstreamReader :  Reads the bytes as charcters (converts bytes into characters)
			6) OutputStreamWriter:  Writes the bytes as charactes (converts characters into bytes)

=================================================================================================


	JDBC (Java Database connectivity) : API (Application Programming Interface)

        JDBC API : classes & and interfaces


	Steps to connect to database :

	step-1 : Load & Register the Driver
	
	Step-2 : Establish the connection

	Step-3 : Create the statement 

	Step-4 : Execute query

	Step-5 : Close connection
	

        Interfaces :

       1)     Connection
       2)     Statement
       3)     ResultSet


        Classes :

		Class

        method :
		getConnection()
		close()

		executeQuery()   =====> select 
		executeUpdate()  =====> Non select
		execute()

		getString()   ========> 
		getInt()      ========>

     JDBC API has two type of queries : Select query (DDL), Non select query (DML)



    Create : insert Query
    Read   : Select
    Update : Upadte
    Delete : delete

 ================================================================================================

  Type of Statement interfaces :

                      1) Statement         : (Similar query is compiled multiple times)


				Statement smt=cn.createStatement();


		      2) PreparedStatement : Perfomance wise is better than Statement (Similar query is compiled once)

				PreaparedStatement psmt=cn.prepareStatement(Query);
				
				Parameterised queries :     insert into tab1 values(?,?,?);

                                Set a parameter :  psmt.setInt();     // set a parameter as a number
                                                   psmt.setString();  // set a parameter as a string


                                 setting the first parameter :  psmt.setInt(1,100);

				 setting the second parameter :  psmt.setInt(2,200);

				 setting the third parameter :  psmt.setInt(3,300);


 
		      3) CallableStatement  : To call stored procedures and function

					
				 CallableStatement csmt=cn.prepareCall("{call insertRecord(?,?)}");


 =========================================================================================================


  Annotation 

           Meta data (data about data) to the compiler
           statrs with @
 
           Type of Annotations: 1) Predefined        :     @override  : Tells the user to override the method exacly which is defined in super class
                                                           @Deprecated : To make a method as Depricated
                                                           @SuppressWarnings : To remove the warning from the program
							   @FunctionalInterface : To define an interface as a functional interface 
							   @WebServlet
							   @Component
							   @Beans
	

       Functional interface : 
			    The interface which have exactly one abstract method , not more than that.


                                 2) Custom Annotation :  User defined can be made using @interface                               

      
           Advantage of Annotation : 1) As a comment  2) Meta information 3) Can be applied on classes, fields......         


          
-----------------------------------------------------------------------

 Lambda Expression 

                  Jdk  1.8 version

		  Anonymous function (Unnamed function)

                  To reduce the code size and make the concise , more readable

 Create a Lambda expression               

 1) Unnamed function
 2) does not have a return type
 3) Access modifiers are not applicable for the lambda expression

  
 public void show()
 {
 	System.out.println("Hello World); 
 }

 () -> { System.out.println("Hello world"); }    (Lambda expression)
  
 () -> System.out.println("Hello world");

 public void add(int a,int b)
 {
 	System.out.println(a+b); 
 } 		

 (int a,int b)-> System.out.println(a+b);

 (a,b)->  System.out.println(a+b);

 
 public int getLength(String name)
 {
	return name.length();
 }

 (String name)-> return name.length();

 name-> name.length();


 To invoke lambda expression Use functional interface

  @FunctionalInterface
  interface intf
  {
	void fun();
  }













                 












			           