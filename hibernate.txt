Hibernate

         Easier communication between Java Application & database

ORM Tool 
          Tool to map the object into the database table
          Uses JDBC API


JPA (Java Persistance API)  : javax.persistence

Advantages: 1) open source , lightweight
            2) Database independent (HQL)
            3) Automatic table creation
            4) High performance 

Hibernate Architecture:

1) Java Application Layer
2) Hibernate framwork
3) Backend API
4) Database 


Two ways to create hibernate application :

1) Use of XML 
2) Use of Annotation class

How to Create hibernate Simple Java Project Using XML(mapping) file

1) Download all hibernate jars and put these jars in lib folder created by you.Also put jdbc-oracle.jar

2) Create hibernate.cfg.xml file (Configuration file) in src folder & write contents in it

   <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
    <property name="hbm2ddl.auto">create</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">root</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.OracleDialect</property>
        <mapping resource="Employee.hbm.xml"/>
    </session-factory>
</hibernate-configuration> 

3) Create a Entity class (Employee.java)

4) Create Employee.hbm.xml (mapping file) in the src folder.Write contents in it.



<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 16 Feb, 2021 4:01:40 PM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="org.myprogramms.Employee" table="EMPL5">
        <id name="id" type="int">
            <column name="ID" />
            <generator class="assigned" />
        </id>
        <property name="name" type="java.lang.String">
            <column name="NAME" />
        </property>
    </class>
</hibernate-mapping>


5) Create a Test file containing main() & run this java file.


=====================================================================================================

Creation of Web Application using hibernate :

CRUD (Create ,Read, Update, Delete) Operation in Hibernate

Inserting record in the table :

				save()  : used to insert record in the table, return type primary key(can be int, string)
				persist() : return type is void
				saveorupdate() : return type is void


Retrieving record from the table using hibernate:

				
                                get()   : used to access a specific record from the table , Object type will be returned


Deleting a record from the table :

 				delete() :  Delete a specific record

Update a record in the table :

				update() :  Updates a specific record


=======================================================================================================

Creating Hibernate Project in Maven (Simple Project)

Creating Hibernate Project in Maven (Web Project)


=======================================================================================================

 
   HQL (Hibernate Query Language) 
    
   Database independent Language

   Operations on the object

   Classname :  object (Persistant Object) =====> Database (tables)



  Insert
  Update
  Delete
  select  : 

             from Classname;   // select All records from the class  (HQL select)

             select * from tablename // select All records from the table  (SQL select)


              createQuery() : pass HQL queries in it.
                              Query is return type.


    DML operations :  executeUpdate()
    DDL Operations :  getResultList()


=======================================================================================================

CRUD operations using HQL :

   Select : Get All records of a table    ( from Classname)

          : Get specific record , use where clause   ( from Classname where condition )

          : Get a specific column values ( select columnname from Classname )

   Update : Update a record

   Delete : Delete a specific record
            Delete comple rows from table   
  
   Insert : To copy the records from one table other table

=======================================================================================================

Hibernate Inheritance


        Base Class:         Class1            (id,name,age)
        Derived Classes :   Class2 (score) , Class3  (Hobby)


     1) Table Per class  : Only one table is created for different beans



     2) Table per subclass : Table per subclass will be created

=====================================================================================================

Spring : Framework of Framework

         It supports Hibernate, JPA, JDBC ....

         Remove Tight coupled code from the class

         IOC(Inversion of control) : Responsible to create & manage objects 

         Dependancy Injection   : Inject object dependencies
       
         Lightweight 

         Spring version 5



      Interface1    - fun() 

                     class1 implements Interface1   fun()   Hello
                     class2 implements Interface1   fun()   HI


         r=new Class1();
         r.fun();           // Hello

         r=new Class2();
	 r.fun();           // Hi

      

========================================================

        Java Application code               

Part-1 : Tight coupling
             
        MyConstructor()
	{
		r=new Class1();	  // Make changes here
	}

   
-------------------------------------------------------   


Part-2 : Loose Coupling

        MyConstructor(reference)
	{

	}


----------------------------------------------------------------------

 Bean configuration file :

                         1) Using XML configuration (Create xml file which stores information about beans(Java objects)
			 2) Using Annotation Configuration ( Annotated class)
                         3) Using Simple Java Class  (No XML)




    applicationContext.xml : Store the information about all the beans / objects


    1) Use of XML Configuration (applicationContext.xml) 

        Step-1 : In TestMain Java program, Load the Spring bean configuration file (applicationContext.xml)

                 ClassPathXMLApplicationContext  : Class which implements container(ApplicationContext)
                 XMLBeanFactory                  : Class which implements container(BeanFactory)   (Legacy class)
  
                 
                 ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext("applicationContext.xml");

    2) Access the beans using getBean()

    3) Invoke methods of Bean class

    4) Close container object

----------------------------------------------------------------------------------------


  Dependency Injection :  
                       Process of injecting depencies into a class


		       Dependency : When one object is dependent on other object functionalities

                       Injection :  To inject the dependencies of one class into another class


  Advantage :  1) To make application more maintainable & Testable
               2) To make application Loosely coupled



  Type of Dependency Injection :
		
                                 1) Constructor Injection
							 When the dependency is injected in the constructor as a parameter.

				 2) Setter Injection
							 When the dependency is injected in the Setter method as a parameter.
						

---------------------------------------------s---------------------------------------------

  Injecting Literal values :

                                DemoBean : class 
                                                    CarModel , Color

  Injecting Literal values through properties file :
                              
                                <context:property-placeholder location="classpath:myprops.properties"/>  

-------------------------------------------------------------------------------------------------------------------


  Bean Scope : 
               Defines lifecycle of a Bean
               How many instances are created for the bean
               Bean Sharing

  Type of Bean scopes :
                
               1) Singleton (Default scope)
                                           Only one instance of the Bean is created
                                           All request for the bean will return a shared reference to the same bean


               2) Prototype
   
					  For every request , Bean will be created
                                          Bean object is not shared among all requests


 ------------------------------------------------------------------------------------------------------------------


 Creation of Spring Project in Maven 
                
                     Include Spring Dependencies :  SpringCore, springContext, SpringWeb, SpringWebMVC, SpringBeans 

 


-------------------------------------------------------------------------------------------------------------------


          applicationContext.xml ( spring Bean configuration, Dependency injection configuration) 



     <component scan>


 2.  Spring Configuration Using Annotation @   


     @component  : Annotation applied on Bean class which will be scanned by the Spring framework
     

     Scanning for Component class 

	1) Read the Bean class
        2) Register the bean class to the Spring container

    
      Component Scanning : 

                           applicationContext.xml ( Use of Component-scan )

    
      Steps to create a Spring Program using Annotation and use spring configuration file :

     1) Enable component scanning in Spring Configuration file (applicatinContext.xml)
     2) Add @component Annotation on the Java class (Bean)     (@component)
     3) Retrieve Bean from Spring Container                    (Use getBean())

----------------------------------------------------------------------------------

  Default Bean ID : When id is not specified with @Component the Default Bean Id is generated by Spring like tennisCoach

-----------------------------------------------------------------------------------

 Dependency Injection

 Autowiring is a process of injecting Dependency in the object
 With Annotation Bean class , Use Autowiring Concept
 
 @Autowired : 

            1) Constructor Injection
            2) Setter Injection
            3) Field Injection

   Spring does the following things if you are injecting dependencies using @Autowired Annotation :
  
   1) Scan the Bean classes where you applied @component
   2) Look for the implementation class which dependency object you are injecting


  1) Constructor Injection

      Steps to perform constructor injection
      a) Define dependency interface & class
      b) Create a constructor in the class for injection
      c) Configure the dependency injection using @Autowired annotation



  2) Setter Injection
       
     Steps 
     a)Create Setter method in the class for Injection
     b)Configure the dependency injection using @Autowired annotation


     Note : On Any method Autowired can be applied ( Method Injection) 


  3) Field Injection

     Steps
     a) Apply Autowired annotation on the field
     b) No need of setter method
 
-----------------------------------------------------------------------------------------------------------------


  @Qualifier Annotation : Use this annotation to resolve the bean ambuguity problem

                         It defines a specific dependency

-------------------------------------------------------------------------------------------------------------



  @Scope Annotation :  can be applied on the bean class to define the scope (singleton or prototype) 


--------------------------------------------------------------------------------------------------------------

  Bean Lifecycle Methods :
      
  1) Bean Instantiation : When bean object is created
  2) Bean Destruction   : When scope of bean object goes to end

  Annotation of a bean lifecycle are applied on methods only, Parameters to the method will not be passed
  
  @PostConstruct

  @PreDestroy

---------------------------------------------------------------------------------------------------------------

  
 3. Spring configuration using Java Code : (No use of xml file)

    Steps 
    a) Create a Java class & Apply @configuration annotation
    b) Add component scanning using @ComponentScan (optional)
    c) Read spring Java configuration class
    d) Retrieve beans from the container


---------------------------------------------------------------------------------------------------------------

 
 Spring Bean Inheritance  : Parent bean definition can be inherited in the child Bean definition

  Parent Bean

  Child Bean


------------------------------------------------------------------------------------------------------


 Spring MVC 
   
               Front Controller (DispatcherServlet) predefined servet of spring
               Controller (User defined controller)
             
               Model : Store data 
               view  : JSP Pages


 USe of Spring MVC : 
		uSED TO CREATE WEB aPPLICATION


 Steps to Create Spring MVC Program : 
  
 1) Two xml files( web.xml )
                 ( Servlet Mapping file (xml))

 2) Create a Controller class on applying @Controller 

 3) Create View (JSP Pages) inside WEB-INF. 
 






































