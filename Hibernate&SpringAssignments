1. Create a class Student and make a mapping file to map this class. In Student class, Take studentRollno,name,age from user. Sno will be id by default. 
   Create a table maually.
2. Create a class Student and make a mapping file to map this class. In Student class, Take studentRollno,name,age from user. Sno will be id by default. 
   Table should be created by hibernate and the records in the table should be updated.
3. Make a class Account which has fields like accno,name & acctype. Acoount class will be Entity class. Take data from user and the table will be created automatically.
4. Create a hibernate project in Maven which is a Dynamic web Project and Create a mapping file for the POJO class.Two JSP pages(A,B) will be created.First Jsp will 
   accepts username,Password and stores the deails in the logintable. In the same project Create another servlet which updates the password in the table. Create a 
   seperate JSP to update the password.Once the record is saved in table then second JSP page will display the message as "Record submitted".
5. Make a simple project in Maven using Hibernate to take the details about a Employee like EmpID,Name,Salary. Delete and Update the specific record. 
6. Create a Maven project in hibernate to perform CRUD Operations. Create a web Application.
7. Create 3 Bean classes named as SBI, IDBI, ICICI. In All classes the dependency is injected in the constructor.Dependency class is InterestRate which has one method
   getRate() which returns the rate of interest according to the bank. Display BankName, Bank Rate.
8. Create two bean classes as Student & Product. Make spring configuration file where configure the setter injection for the method which is saving the entered records 
   for the student as rollno,name,percentage in the database and do the same for products.
9. Write a spring configuration file which injects the username, email and password to the Bean class User.
10. Write the configuration for 2 bean objects in the Spring Configuration file & Retrieve all the bean objects in the testApp using XmlBeanFactory.
11. Make a Bean class which has a method which accepts firstname & lastname as parameters and returns the Fullname. Inject this bean class object into a Class Person
    Print the Details of a person as Fullname & age.
12. Create a spring Project in Maven. Make two bean classes (Annotated) ,In First Bean define a method which is displaying some message .Apply the Injection on this method.
     In second bean Apply the Constructor injection and a method in the bean is displaying fibbonacci series in it.
13. Create an interface as Person. Make two classes Student and Manager which are implementing the Person interface.In person interface there are two methods as
    getDetails() and showDetails(). Create a Bean class where Dependency injection should be applied on the field. Make a TestMain class where retrieve the details of 
    Student and manager.
14. Make a Spring MVC Project in Maven, Create a registration page where customer Id, firstname, lastname and age is to be taken in the registration form and save data 
    in the database .After submitting data , display the message "Registration Successful".
15  Make a program to apply constructor injection using XML and Annotation.
16  Make a program to apply Setter injection using XML and Annotation.
17  Create a Spring MVC form where two fields have to be taken as Username & Passord. Username & password can not be null & Password must be 8 characters long. If 
    Username is "admin" and password is "abcd" then a success.jsp should display the Message as "Welcome admin". If any errors are there in the fields then show the errors
    on the same page for the text fields.
18  Create bean class Student and access the functionality in the Student class without using any XML configuration file. Use Java code to define configuration.
19. Create an advice which is printing the output on a pointcut method showMessage as following : 
     1234567891011        ( should come from advice1 )
     Welcome from method  ( Message from Bean Class method )
     ************         ( should come from advice2 )
20. Write a configuration class to inject a dependency of one bean class into another bean class using setter injection. BeanA and BeanB are the bean classes.
    BeanA has a method which accepts a number and returns the cube value of the number. Inject the BeanA into BeanB and BeanB has a method which accepts a number and
    returns the square value of the number. Print the Square and cube.
21. Create a simple hibernate project without Maven to define a POJO class Users (without using annotation). Take userid,username,city from user and print all details on the
    Console.
22. Create a simple hibernate project with Maven to define a POJO class Users (without using annotation). Take userid,username,city from user and print all details on the
    Console.
23. Create a simple hibernate project without Maven to define a POJO class Users (using annotation). Take userid,username,city from user and print all details on the
    Console.
24. Create a simple hibernate project with Maven to define a POJO class Users (using annotation). Take userid,username,city from user and print all details on the
    Console.
25. Create a dynamic hibernate project without Maven to define a POJO class Users (without annotation). Take userid,username,city from user and print all details on the
    Console.
26. Create a dynamic hibernate project with Maven to define a POJO class Users (without annotation). Take userid,username,city from user and print all details on the
    Web Page.
27. Create a dynamic hibernate project with Maven to define a POJO class Users (with annotation). Take userid,username,city from user and print all details on the
    Web Page.
 






